- content_for :breadcrumbs do
  = link_to "Continuities", boards_path
  &raquo;
  = link_to @post.board.name, board_path(@post.board)
  - if @post.section
    &raquo;
    = link_to @post.section.name, board_section_path(@post.section)
  &raquo;
  = link_to @post.subject, post_path(@post)
  &raquo;
  %b Metadata

%table#stats
  %thead
    %tr
      %th{colspan: 2}
        Metadata:
        = link_to @post.subject, post_path(@post)
    - if @post.description.present?
      %tr
        %td.post-subheader{colspan: 2, style: 'width: unset;'}= sanitize_post_description(@post.description).html_safe
  %tbody
    %tr
      %th.sub.width-150 Status
      %td{class: cycle('odd', 'even')}
        - case @post.status
        - when Post::STATUS_ACTIVE
          = image_tag "icons/book_open.png", class: 'vmid', title: "In Progress"
          In Progress
        - when Post::STATUS_COMPLETE
          = image_tag "icons/book.png", class: 'vmid', title: "In Progress"
          Complete
        - when Post::STATUS_HIATUS
          = image_tag "icons/hourglass.png", class: 'vmid', title: "In Progress"
          On Hiatus
        - when Post::STATUS_ABANDONED
          = image_tag "icons/book_grey.png", class: 'vmid', title: "In Progress"
          Abandoned
    %tr
      %th.sub.width-150 Audience
      %td{class: cycle('odd', 'even')}
        = privacy_state(@post.privacy)
        - if @post.access_list?
          \-
          - @post.post_viewers.each_with_index do |viewer, i|
            - if i < @post.post_viewers.count - 1
              = succeed ',' do
                = link_to viewer.user.username, user_path(viewer.user)
            - else
              = link_to viewer.user.username, user_path(viewer.user)
    %tr
      %th.sub.width-150 Authors
      %td{class: cycle('odd', 'even')}
        - post_authors = @post.post_authors.joins(:user).order('LOWER(users.username) asc')
        %ul
          - post_authors.each do |post_author|
            - author = post_author.user
            %li
              = link_to author.username, user_path(author)
              - unless post_author.joined?
                (invited)
    %tr
      %th.sub.width-150.vtop Characters
      %td{class: cycle('odd', 'even')}
        %ul
          - @post.character_appearance_counts.each do |character, count|
            %li
              = link_to character.name, character_path(character)
              = surround '(', ')' do
                = link_to "#{count} times", search_replies_path(post_id: @post.id, character_id: character.id, commit: true)

    - if @post.settings.present?
      %tr
        %th.sub.width-150 Setting
        %td{class: cycle('odd', 'even')}= @post.settings.ordered_by_post_tag.map { |tag| link_to tag.name, tag_path(tag) }.join(', ').html_safe
    - if @post.content_warnings.present?
      %tr
        %th.sub.width-150 Content Warnings
        %td{class: cycle('odd', 'even')}= @post.content_warnings.ordered_by_post_tag.map { |tag| link_to tag.name, tag_path(tag) }.join(', ').html_safe
    - if @post.labels.present?
      %tr
        %th.sub.width-150 Labels
        %td{class: cycle('odd', 'even')}= @post.labels.ordered_by_post_tag.map { |tag| link_to tag.name, tag_path(tag) }.join(', ').html_safe
    %tr
      %th.sub.width-150.vtop Word Count
      %td{class: cycle('odd', 'even')}
        = number_with_delimiter(@post.total_word_count)
        - if @post.joined_authors.count > 1
          %ul
            - @post.author_word_counts.each do |username, count|
              %li
                = username + ':'
                = number_with_delimiter(count)
    %tr
      %th.sub.width-150 Time Begun
      %td{class: cycle('odd', 'even')}= pretty_time(@post.created_at)
    %tr
      %th.sub.width-150 Time Last Updated
      %td{class: cycle('odd', 'even')}= pretty_time(@post.tagged_at)
